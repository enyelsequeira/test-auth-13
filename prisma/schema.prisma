// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  Session          Session[]
  favoriteMovies   FavoriteMovie[] // Update this line for favorite movies relationship
  watchLaterMovies WatchLaterMovie[] // Add this line for watch later movies relationship
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FavoriteMovie {
  id             String  @id @default(cuid())
  userId         String
  backdrop_path  String?
  homepage       String?
  movieId        Int     @unique
  original_title String?
  popularity     String?
  poster_path    String?
  tagline        String?
  title          String?
  vote_average   String?
  vote_count     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@index([userId])
}

model WatchLaterMovie {
  id             String  @id @default(cuid())
  userId         String
  backdrop_path  String?
  homepage       String?
  movieId        Int     @unique
  original_title String?
  popularity     String?
  poster_path    String?
  tagline        String?
  title          String?
  vote_average   String?
  vote_count     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@index([userId])
}
